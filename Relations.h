#pragma once

const int knightPath[8] = { 14, 31, 33, 18,-14,-31,-33,-18 };
const int kingPath[8]   = { -1, 15, 16, 17,  1,-15,-16,-17 };
const int bishopPath[4] = { 15, 17,-15,-17 };
const int rookPath[4]   = { -1, 16, 1, -16 };


// Distance to edge
const int distance2Edge[128] =
{//   a b c d e f g h
/*1*/ 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
/*2*/ 0,1,1,1,1,1,1,0, 0,0,0,0,0,0,0,0,
/*3*/ 0,1,2,2,2,2,1,0, 0,0,0,0,0,0,0,0,
/*4*/ 0,1,2,3,3,2,1,0, 0,0,0,0,0,0,0,0,
/*5*/ 0,1,2,3,3,2,1,0, 0,0,0,0,0,0,0,0,
/*6*/ 0,1,2,2,2,2,1,0, 0,0,0,0,0,0,0,0,
/*7*/ 0,1,1,1,1,1,1,0, 0,0,0,0,0,0,0,0,
/*8*/ 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
};

const int distance2Corner[128] =
{//   a b c d e f g h
/*1*/ 0,1,2,3,3,2,1,0, 0,0,0,0,0,0,0,0,
/*2*/ 1,1,2,3,3,2,1,1, 0,0,0,0,0,0,0,0,
/*3*/ 2,2,2,3,3,2,2,2, 0,0,0,0,0,0,0,0,
/*4*/ 3,3,3,3,3,3,3,3, 0,0,0,0,0,0,0,0,
/*5*/ 3,3,3,3,3,3,3,3, 0,0,0,0,0,0,0,0,
/*6*/ 2,2,2,3,3,2,2,2, 0,0,0,0,0,0,0,0,
/*7*/ 1,1,2,3,3,2,1,1, 0,0,0,0,0,0,0,0,
/*8*/ 0,1,2,3,3,2,1,0, 0,0,0,0,0,0,0,0
};

// Distance to color-corner
const int distance2ColorCorner[2][128] =
{//   a b c d e f g h
/*1*/ 7,6,5,4,3,2,1,0, 0,0,0,0,0,0,0,0,
/*2*/ 6,6,5,4,3,2,1,1, 0,0,0,0,0,0,0,0,
/*3*/ 5,5,5,4,3,2,2,2, 0,0,0,0,0,0,0,0,
/*4*/ 4,4,4,4,3,3,3,3, 0,0,0,0,0,0,0,0,
/*5*/ 3,3,3,3,4,4,4,4, 0,0,0,0,0,0,0,0,
/*6*/ 2,2,2,3,4,5,5,5, 0,0,0,0,0,0,0,0,
/*7*/ 1,1,2,3,4,5,6,6, 0,0,0,0,0,0,0,0,
/*8*/ 0,1,2,3,4,5,6,7, 0,0,0,0,0,0,0,0,
//    a b c d e f g h
/*1*/ 0,1,2,3,4,5,6,7, 0,0,0,0,0,0,0,0,
/*2*/ 1,1,2,3,4,5,6,6, 0,0,0,0,0,0,0,0,
/*3*/ 2,2,2,3,4,5,5,5, 0,0,0,0,0,0,0,0,
/*4*/ 3,3,3,3,4,4,4,4, 0,0,0,0,0,0,0,0,
/*5*/ 4,4,4,4,3,3,3,3, 0,0,0,0,0,0,0,0,
/*6*/ 5,5,5,4,3,2,2,2, 0,0,0,0,0,0,0,0,
/*7*/ 6,6,5,4,3,2,1,1, 0,0,0,0,0,0,0,0,
/*8*/ 7,6,5,4,3,2,1,0, 0,0,0,0,0,0,0,0
};

// Diagonals 
// If (diagonals[sq1]&diagonals[sq2])>0 they are on the same diagonal
const unsigned int diagonals[128] =
{//         a          b          c          d          e          f          g          h
/*1*/ 0x00800001,0x00400002,0x00200004,0x00100008,0x00080010,0x00040020,0x00020040,0x00010080, 0,0,0,0,0,0,0,0,
/*2*/ 0x01000002,0x00800004,0x00400008,0x00200010,0x00100020,0x00080040,0x00040080,0x00020100, 0,0,0,0,0,0,0,0,
/*3*/ 0x02000004,0x01000008,0x00800010,0x00400020,0x00200040,0x00100080,0x00080100,0x00040200, 0,0,0,0,0,0,0,0,
/*4*/ 0x04000008,0x02000010,0x01000020,0x00800040,0x00400080,0x00200100,0x00100200,0x00080400, 0,0,0,0,0,0,0,0,
/*5*/ 0x08000010,0x04000020,0x02000040,0x01000080,0x00800100,0x00400200,0x00200400,0x00100800, 0,0,0,0,0,0,0,0,
/*6*/ 0x10000020,0x08000040,0x04000080,0x02000100,0x01000200,0x00800400,0x00400800,0x00201000, 0,0,0,0,0,0,0,0,
/*7*/ 0x20000040,0x10000080,0x08000100,0x04000200,0x02000400,0x01000800,0x00801000,0x00402000, 0,0,0,0,0,0,0,0,
/*8*/ 0x40000080,0x20000100,0x10000200,0x08000400,0x04000800,0x02001000,0x01002000,0x00804000, 0,0,0,0,0,0,0,0,
};

// Same rank or file (lines[sq1]&lines[sq2])>0
const unsigned int lines[128] =
{//      a      b      c      d      e      f      g      h
/*1*/ 0x0101,0x0201,0x0401,0x0801,0x1001,0x2001,0x4001,0x8001, 0,0,0,0,0,0,0,0,
/*2*/ 0x0102,0x0202,0x0402,0x0802,0x1002,0x2002,0x4002,0x8002, 0,0,0,0,0,0,0,0,
/*3*/ 0x0104,0x0204,0x0404,0x0804,0x1004,0x2004,0x4004,0x8004, 0,0,0,0,0,0,0,0,
/*4*/ 0x0108,0x0208,0x0408,0x0808,0x1008,0x2008,0x4008,0x8008, 0,0,0,0,0,0,0,0,
/*5*/ 0x0110,0x0210,0x0410,0x0810,0x1010,0x2010,0x4010,0x8010, 0,0,0,0,0,0,0,0,
/*6*/ 0x0120,0x0220,0x0420,0x0820,0x1020,0x2020,0x4020,0x8020, 0,0,0,0,0,0,0,0,
/*7*/ 0x0140,0x0240,0x0440,0x0840,0x1040,0x2040,0x4040,0x8040, 0,0,0,0,0,0,0,0,
/*8*/ 0x0180,0x0280,0x0480,0x0880,0x1080,0x2080,0x4080,0x8080, 0,0,0,0,0,0,0,0,
};

// Distance = distance[|sq1-sq2|]
const unsigned int distancebetweensquares[0x80] =
{//     0 1 2 3 4 5 6 7 8 9 a b c d e f
/*00*/  0,1,2,3,4,5,6,7,8,7,6,5,4,3,2,1,
/*10*/  1,1,2,3,4,5,6,7,8,7,6,5,4,3,2,2,
/*20*/  2,2,2,3,4,5,6,7,8,7,6,5,4,3,3,3,
/*30*/  3,3,3,3,4,5,6,7,8,7,6,5,4,4,4,4,
/*40*/  4,4,4,4,4,5,6,7,8,7,6,5,5,5,5,5,
/*50*/  5,5,5,5,5,5,6,7,8,7,6,6,6,6,6,6,
/*60*/  6,6,6,6,6,6,6,7,8,7,7,7,7,7,7,7,
/*70*/  7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8
};

#define squaredistance(a,b) ((a>b)?distancebetweensquares[a-b]:distancebetweensquares[b-a])

